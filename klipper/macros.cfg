#-------------------------------#
#   A place for custom macros   #
#-------------------------------#

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z25 F600
  M84

#-------------------------#
#        SCV              #
#-------------------------#

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

#-------------------------#
#      SPEED TEST         #
#-------------------------#

## Home, get position, throw around toolhead, home again.
## If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
## We only measure to a full step to accomodate for endstop variance.
## Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


#-------------------------#
#   AWD SYNC              #
#-------------------------#
[gcode_macro AWD_SYNC]
description: Remember to move the bed to the center and disconnect the front stepper pulleys
gcode:
    SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    M84
    G4 P500
    SET_KINEMATIC_POSITION X=117 Y=117 Z=20 
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    G90 

###---------------------------------------------------------------------------------------------
[gcode_macro X_AWD_SYNC]
description: Remember to move the bed to the center and disconnect the front stepper pulley
gcode:
  {% set axis = params.AXIS|default("x")|string %} %}
  {% set accel = params.ACCEL|default(40000)|float %}
  {% set v = params.VELOCITY|default(300)|float %}
  {% set dist = params.DISTANCE|default(4.0)|float %}
  {% set count = params.COUNT|default(10)|int %}
  {% set go = params.PULLEY_DISCONNECTED|default(0)|int %}
  
  {% if go == 1 %}
    G91
    RESPOND TYPE=command MSG='Remember to move the carriage in the center and disconnect one of the pulleys.'
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}' 
  
    RESPOND TYPE=command MSG='Equalising tension between locked stepper and carriage'
    {% for i in range((count/2)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={+dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    {% endfor %}
    {% for i in range(count) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ +dist/7 } VELOCITY={ v } ACCEL={ accel }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist/7 } VELOCITY={ v } ACCEL={ accel }
    {% endfor %}
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Disabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Enabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_KINEMATIC_POSITION X=127 Y=127 Z=0
    G4 P500
    RESPOND TYPE=command MSG='Kinematic Position Set'
    G1 {axis}1 F{150*60}
    G4 P1000
    G1 {axis}-1 F{150*60}
    G90
    G4 P1000
    RESPOND TYPE=command MSG='Shaking Axis'
    {% for i in range((count/4)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ +dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ -dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    {% endfor %}
    RESPOND TYPE=command MSG='Cycling steppers On and Off'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"Done! Stepper_"+axis+" and "+"stepper_"+axis+"1 Synced. Please lock your pulley first and disable the motors after!"}'
  {% else %}
    RESPOND TYPE=command MSG="First move the bed to center, disconnect one of the X stepper pulleys, and change PULLEY_DISCONNECTED value to 1"
  {% endif %}

[gcode_macro Y_AWD_SYNC]
description: Remember to move the bed to the center and disconnect the front stepper pulley
gcode:
  {% set axis = params.AXIS|default("y")|string %} %}
  {% set accel = params.ACCEL|default(40000)|float %}
  {% set v = params.VELOCITY|default(300)|float %}
  {% set dist = params.DISTANCE|default(4.0)|float %}
  {% set count = params.COUNT|default(10)|int %}
  {% set go = params.PULLEY_DISCONNECTED|default(0)|int %}
  
  {% if go == 1 %}
    G91
    RESPOND TYPE=command MSG='Remember to move the carriage in the center and disconnect one of the pulleys.'
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}' 
  
    RESPOND TYPE=command MSG='Equalising tension between locked stepper and carriage'
    {% for i in range((count/2)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={+dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist*4 } VELOCITY={ v/3 } ACCEL={ accel/3 }
    {% endfor %}
    {% for i in range(count) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ +dist/7 } VELOCITY={ v } ACCEL={ accel }
    FORCE_MOVE STEPPER={ "stepper_"+axis+"1" } DISTANCE={ -dist/7 } VELOCITY={ v } ACCEL={ accel }
    {% endfor %}
  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Disabled"}'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Disabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+" Enabled"}'  
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"stepper_"+axis+"1 Enabled"}'
    SET_KINEMATIC_POSITION X=127 Y=127 Z=0
    G4 P500
    RESPOND TYPE=command MSG='Kinematic Position Set'
    G1 {axis}1 F{150*60}
    G4 P1000
    G1 {axis}-1 F{150*60}
    G90
    G4 P1000
    RESPOND TYPE=command MSG='Shaking Axis'
    {% for i in range((count/4)|int) %}
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ +dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    FORCE_MOVE STEPPER={ "stepper_"+axis } DISTANCE={ -dist } VELOCITY={ 6 } ACCEL={ accel/4 }
    {% endfor %}
    RESPOND TYPE=command MSG='Cycling steppers On and Off'
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=0
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis} ENABLE=1
    G4 P500
    SET_STEPPER_ENABLE STEPPER={"stepper_"+axis+"1"} ENABLE=1
    G4 P500
    RESPOND TYPE=command MSG='{"Done! Stepper_"+axis+" and "+"stepper_"+axis+"1 Synced. Please lock your pulley first and disable the motors after!"}'
  {% else %}
    RESPOND TYPE=command MSG="First move the bed to center, disconnect one of the Y stepper pulleys, and change PULLEY_DISCONNECTED value to 1"
  {% endif %}

#-------------------------#
#   VARIABLE PA           #
#-------------------------#

[save_variables]
filename: /home/pi/printer_data/config/ercf_vars.cfg

[gcode_macro _USE_PA]
gcode:
    {% set feature = params.F | lower() | default("mixed") %}
    {% set svv = printer.save_variables.variables %}
    {% set filament_default_pa = svv.pa_default | default(-1) %}
    {% set default_pa = printer.configfile.settings.extruder.pressure_advance if filament_default_pa < 0 else filament_default_pa %}
    {% set feature_pa = svv['pa_' + feature] | default(-1) %}
    {% set new_pa = default_pa if feature_pa < 0 else feature_pa %}
    SET_PRESSURE_ADVANCE ADVANCE={ new_pa }

[gcode_macro SET_PAS]
gcode:

    {% set features = ['Default', 'Perimeter', 'ExternalPerimeter', 'OverhangPerimeter', 'InternalInfill', 'SolidInfill', 'TopSolidinfill', 'BridgeInfill', 'GapFill', 'Skirt', 'SupportMaterial', 'SupportMaterialInterface', 'Mixed'] %}
    {% for feature in features %}
      SAVE_VARIABLE VARIABLE={ 'pa_' + feature | lower() } VALUE=-1
    {% endfor %}
    {% for feature,value in params.items() %}
      SAVE_VARIABLE VARIABLE={ 'pa_' + feature | lower() } VALUE={ value | float }
    {% endfor %}

    